---

- name: Ensure Docker service directory is present
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: Ensure Docker daemon configuration overrides file is present
  copy:
    src: docker-cloud/overrides.conf
    dest: /etc/systemd/system/docker.service.d/overrides.conf
  notify: "Restart Docker"

- name: Ensure Docker daemon configuration file is present
  template:
    src: docker-cloud/daemon.json.j2
    dest: /etc/docker/daemon.json
  notify: "Restart Docker"

- name: Ensure Docker client certificate directory is present for {{ prefix }} registry
  file:
    path: "/etc/docker/certs.d/{{ hostvars.docker_registry.ansible_host }}"
    state: directory
    recurse: yes

- name: Ensure {{ prefix }} Docker registry client certificate is present
  copy:
    content: "{{ docker_registry_ca }}"
    dest: "/etc/docker/certs.d/{{ hostvars.docker_registry.ansible_host }}/ca.crt"
  no_log: true
  notify: "Restart Docker"

- name: Ensure {{ prefix }} Docker cloud server certificates are present
  copy:
    content: "{{ item.value.content }}"
    dest: "/etc/docker/{{ item.value.name }}"
  loop: "{{ lookup('dict', certificates) }}"
  no_log: true
  notify: "Restart Docker"

- name: Ensure docker.konts.lv DNS is added to etc hosts file on {{ prefix }} Docker cloud host
  blockinfile:
    path: /etc/hosts
    block: |
      127.0.0.1       localhost.localdomain   localhost
      ::1             localhost6.localdomain6 localhost6
      {{ hostvars.docker_registry.ansible_host }}    docker.konts.lv

      # The following lines are desirable for IPv6 capable hosts
      ::1     localhost ip6-localhost ip6-loopback
      fe00::0 ip6-localnet
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters
      ff02::3 ip6-allhosts

# - name: Check curlftpfs package
#   package:
#     name: curlftpfs
#     state: present

# - name: Create mount point
#   file:
#     path: /mnt1/ftp
#     state: directory

# - name: Check if mountpoint exists
#   command: mountpoint /mnt1/ftp
#   register: output
#   ignore_errors: yes

# - name: Unmount FTP
#   command: umount -f /mnt1/ftp
#   when: output.rc == 0

# - name: Mount FTP
#   command: curlftpfs -o allow_other exchange:{{ hostvars.ftp.ftp_exchange_password }}@{{ hostvars.ftp.ansible_host }} /mnt1/ftp
